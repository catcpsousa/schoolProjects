package Trabalho1;

/**
 * Classe para representar um n√∫mero complexo com partes real e imagin√°ria.
 * Os valores para as partes real e imagin√°ria s√£o representados como double.
 * Nota: Caso uma das partes seja zero, n√£o ser√° exibida na representa√ß√£o do n√∫mero complexo.
 */
public class ComplexNumber {

    /**
     * definidos como private para garantir o encapsulamento, ou
     * seja, que somente a pr√≥pria classe tenha acesso direto a eles
     *
     */
    //Atributo para a parte real do n√∫mero complexo
    private double real;
    //Atributo para a parte imagin√°ria do n√∫mero complexo
    private double imaginario;

    /**
     * Construtor vazio que inicializa um n√∫mero complexo com parte real e imagin√°ria iguais a zero.
     */
    public ComplexNumber(){

    }

    /**
     * Cria um novo n√∫mero complexo com a parte real igual a r e a parte imagin√°ria igual a i.
     * @param r a parte real do n√∫mero complexo
     * @param i a parte imagin√°ria do n√∫mero complexo
     */
    public ComplexNumber(double r, double i){
        this.real = r;
        this.imaginario = i;
    }

    /**
     * Retorna o valor da parte real do n√∫mero complexo.
     * @return o valor da parte real do n√∫mero complexo.
     */
    public double getReal(){
        return real;
    }

    /**
     * Retorna o valor da parte imagin√°ria do n√∫mero complexo.
     * @return o valor da parte imagin√°ria do n√∫mero complexo.
     */
    public double getImaginario() {
        return imaginario;
    }

    /**
     * Retorna a soma deste n√∫mero complexo com outro n√∫mero complexo fornecido.
     *
     * @param o o n√∫mero complexo a ser somado a este n√∫mero complexo
     * @return um novo n√∫mero complexo que √© a soma deste n√∫mero complexo com o n√∫mero complexo fornecido
     */
    public ComplexNumber somar(ComplexNumber o){
        double resultadoReal = this.real + o.real;
        double resultadoImagin = this.imaginario + o.imaginario;
        return new ComplexNumber(resultadoReal, resultadoImagin);
    }

    /**
     *
     * Subtrai um n√∫mero complexo 'o' do n√∫mero complexo atual e retorna um novo n√∫mero complexo com o resultado.
     * @param o o n√∫mero complexo a ser subtra√≠do
     * @return o novo n√∫mero complexo resultado da subtra√ß√£o
     */
    public ComplexNumber subtrair(ComplexNumber o){
        double resultadoReal = this.real - o.real;
        double resultadoImagin = this.imaginario - o.imaginario;
        return new ComplexNumber(resultadoReal, resultadoImagin);
    }

    /**
     *
     * Multiplica um n√∫mero complexo 'o' do n√∫mero complexo atual e retorna um novo n√∫mero complexo com o resultado.
     * @param o o n√∫mero complexo a ser multiplicado
     * @return o novo n√∫mero complexo resultado da multiplica√ß√£o
     */
    public ComplexNumber multiplicar(ComplexNumber o){
        double resultadoReal = this.real * o.real - this.imaginario * o.imaginario;
        double resultadoImagin = this.imaginario * o.imaginario + this.real * o.real;
        return new ComplexNumber(resultadoReal, resultadoImagin);
    }

    /**
     *
     * Divide um n√∫mero complexo 'o' do n√∫mero complexo atual e retorna um novo n√∫mero complexo com o resultado.
     * @param o o n√∫mero complexo a ser dividido
     * @return o novo n√∫mero complexo resultado da divis√£o
     */
    public ComplexNumber dividir(ComplexNumber o){
        double denominador = o.real * o.real + o.imaginario * o.imaginario;
        double resultadoReal = (this.real * o.real + this.imaginario * o.imaginario)/denominador;
        double resultadoImaginario = (this.imaginario * o.imaginario + this.real * o.real) / denominador;
        return new ComplexNumber(resultadoReal,resultadoImaginario);
    }

    /**
     *
     * Conjuga o n√∫mero complexo atual e retorna um novo n√∫mero complexo com o resultado.
     * @return o novo n√∫mero complexo resultado do conjugado
     */
    public ComplexNumber conjugar(){
        //O conjugado de um n√∫mero complexo ùëß = ùëé + ùëèùëñ √© um n√∫mero complexo denotado por
        //ùëßÃÑ= ùëé ‚àí ùëèùëñ.
        return new ComplexNumber(this.real, -this.imaginario);
    }

    /**
     *
     * Inverte o n√∫mero complexo atual e retorna um novo n√∫mero complexo com o resultado.
     * @return o novo n√∫mero complexo resultado do inverso
     */
    public ComplexNumber inverter(){
        double denominador = this.real * this.real + this.imaginario * this.imaginario;
        double resultadoReal = this.real / denominador;
        double resultadoImaginario = -this.imaginario /denominador;
        return new ComplexNumber(resultadoReal, resultadoImaginario);
    }

    /**
     * Retorna o sim√©trico do n√∫mero complexo, ou seja, um n√∫mero complexo
     * cujos valores reais e imagin√°rios s√£o negativos em rela√ß√£o ao n√∫mero complexo atual.
     * Se algum dos valores resultantes for igual a -0, ele ser√° substitu√≠do por 0.
     * @return um novo objeto Trabalho1.ComplexNumber com os valores reais e imagin√°rios negativos
     */
    public ComplexNumber simetrico(){
        double real = -this.real;
        double imaginario = -this.imaginario;
        if (real == -0) {
            real = 0;
        }
        if (imaginario == -0) {
            imaginario = 0;
        }
        return new ComplexNumber(real, imaginario);
    }

    /**
     * Retorna o resultado da exponencia√ß√£o deste n√∫mero complexo pelo expoente fornecido.
     *
     * @param e o expoente a ser aplicado a este n√∫mero complexo
     * @return o resultado da exponencia√ß√£o
     */
    public ComplexNumber expoente(double e) {
        double r = Math.pow(Math.sqrt(this.real * this.real + this.imaginario * this.imaginario), e);
        double theta = Math.atan2(this.imaginario, this.real);
        double resultadoReal = r * Math.cos(e * theta);
        double resultadoImaginario = r * Math.sin(e * theta);
        return new ComplexNumber(resultadoReal, resultadoImaginario);
    }

    /**
     * retorna uma representa√ß√£o em String do n√∫mero complexo no formato "a + bi",
     * onde "a" e "b" s√£o os componentes real e imagin√°rio, respectivamente.
     * Se o n√∫mero complexo for puramente real ou imagin√°rio, a parte n√£o
     * utilizada √© omitida na string resultante. Se o imagin√°rio for negativo,
     * a parte real e imagin√°ria s√£o separadas por um sinal de subtra√ß√£o.
     * Caso contr√°rio, s√£o separadas por um sinal de adi√ß√£o. O m√©todo usa
     * formata√ß√£o de string para arredondar os valores com 2 casas decimais, exceto para valores inteiros.
     * @return a string formatada de acordo com o sinal
     */
    @Override
    public String toString() {
        if (imaginario == 0) {
            if (real == (int)real) {
                return String.format("%.0f", real);
            } else {
                return String.format("%.2f", real);
            }
        } else if (real == 0) {
            if (imaginario == (int)imaginario) {
                return String.format("%.0fi", imaginario);
            } else {
                return String.format("%.2fi", imaginario);
            }
        } else if (imaginario < 0) {
            if (imaginario == (int)imaginario) {
                return String.format("%.2f - %.0fi", real, -imaginario);
            } else {
                return String.format("%.2f - %.2fi", real, -imaginario);
            }
        } else {
            if (imaginario == (int)imaginario) {
                return String.format("%.2f + %.0fi", real, imaginario);
            } else {
                return String.format("%.2f + %.2fi", real, imaginario);
            }
        }
    }

}
